// <auto-generated />
using System;
using Lira.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lira.Data.Migrations;

[DbContext(typeof(LiraDbContext))]
[Migration(id: "20231022155802_CreatePhones")]
partial class CreatePhones
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", value: "7.0.12")
            .HasAnnotation("Relational:MaxIdentifierLength", value: 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity(name: "Lira.Data.Entities.EmailEntity", entity =>
        {
            entity.Property<Guid>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                .HasColumnName("id");

            entity.Property<string>("Address")
                .IsRequired()
                .HasColumnType("varchar(50)")
                .HasColumnName("address");

            entity.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("created_at");

            entity.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("deleted_at");

            entity.Property<Guid>("PersonId")
                .HasColumnType("uuid")
                .HasColumnName("person_id");

            entity.Property<string>("Status")
                .IsRequired()
                .ValueGeneratedOnAdd()
                .HasColumnType("varchar(10)")
                .HasDefaultValue("Active")
                .HasColumnName("status");

            entity.Property<string>("Type")
                .IsRequired()
                .ValueGeneratedOnAdd()
                .HasColumnType("varchar(10)")
                .HasDefaultValue("Personal")
                .HasColumnName("type");

            entity.Property<DateTime?>("UpdatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("updated_at");

            entity.HasKey("Id")
                .HasName("PK_email_id");

            entity.HasIndex("Address")
                .IsUnique()
                .HasDatabaseName("IX_email_address");

            entity.HasIndex("PersonId");

            entity.ToTable(name: "emails", schema: null, table =>
            {
                table.HasCheckConstraint(
                    name: "CK_emails_status",
                    sql: "status IN ('Active', 'Inactive', 'Deleted')"
                );

                table.HasCheckConstraint(
                    name: "CK_emails_type",
                    sql: "type IN ('Personal', 'Corporate')"
                );
            });
        });

        modelBuilder.Entity(name: "Lira.Data.Entities.PersonEntity", entity =>
        {
            entity.Property<Guid>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                .HasColumnName("id");

            entity.Property<string>("Cpf")
                .IsRequired()
                .HasColumnType("varchar(11)")
                .HasColumnName("cpf");

            entity.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("created_at");

            entity.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("deleted_at");

            entity.Property<string>("Name")
                .IsRequired()
                .HasColumnType("varchar(30)")
                .HasColumnName("name");

            entity.Property<string>("Status")
                .IsRequired()
                .ValueGeneratedOnAdd()
                .HasColumnType("varchar(10)")
                .HasDefaultValue("Active")
                .HasColumnName("status");

            entity.Property<string>("Surname")
                .IsRequired()
                .HasColumnType("varchar(30)")
                .HasColumnName("surname");

            entity.Property<DateTime?>("UpdatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("updated_at");

            entity.HasKey("Id")
                .HasName("PK_persons_id");

            entity.HasIndex("Cpf")
                .IsUnique()
                .HasDatabaseName("IX_persons_cpf");

            entity.ToTable(name: "persons", schema: null, table =>
            {
                table.HasCheckConstraint(
                    name: "CK_persons_status",
                    sql: "status IN ('Active', 'Inactive', 'Deleted')"
                );
            });
        });

        modelBuilder.Entity(name: "Lira.Data.Entities.PhoneEntity", entity =>
        {
            entity.Property<Guid>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                .HasColumnName("id");

            entity.Property<DateTime>("CreatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("created_at");

            entity.Property<string>("Ddd")
                .IsRequired()
                .HasColumnType("varchar(2)")
                .HasColumnName("ddd");

            entity.Property<DateTime?>("DeletedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("deleted_at");

            entity.Property<string>("Number")
                .IsRequired()
                .HasColumnType("varchar(9)")
                .HasColumnName("number");

            entity.Property<Guid>("PersonId")
                .HasColumnType("uuid")
                .HasColumnName("person_id");

            entity.Property<string>("Status")
                .IsRequired()
                .ValueGeneratedOnAdd()
                .HasColumnType("varchar(10)")
                .HasDefaultValue("Active")
                .HasColumnName("status");

            entity.Property<DateTime?>("UpdatedAt")
                .HasColumnType("timestamp with time zone")
                .HasColumnName("updated_at");

            entity.HasKey("Id")
                .HasName("PK_phone_id");

            entity.HasIndex("PersonId");

            entity.ToTable(name: "phones", schema: null, table =>
            {
                table.HasCheckConstraint(
                    name: "CK_phones_status",
                    sql: "status IN ('Active', 'Inactive', 'Deleted')"
                );
            });
        });

        modelBuilder.Entity(name: "Lira.Data.Entities.EmailEntity", entity =>
        {
            entity
                .HasOne(
                    relatedTypeName: "Lira.Data.Entities.PersonEntity",
                    navigationName: "Person"
                )
                .WithMany(collection: "Emails")
                .HasForeignKey("PersonId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                .HasConstraintName("FK_emails_person_id");

            entity.Navigation("Person");
        });

        modelBuilder.Entity(name: "Lira.Data.Entities.PhoneEntity", entity =>
        {
            entity
                .HasOne(
                    relatedTypeName: "Lira.Data.Entities.PersonEntity",
                    navigationName: "Person"
                )
                .WithMany(collection: "Phones")
                .HasForeignKey("PersonId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                .HasConstraintName("FK_phones_person_id");

            entity.Navigation("Person");
        });

        modelBuilder.Entity(name: "Lira.Data.Entities.PersonEntity", entity =>
        {
            entity.Navigation("Emails");

            entity.Navigation("Phones");
        });
#pragma warning restore 612, 618
    }
}
